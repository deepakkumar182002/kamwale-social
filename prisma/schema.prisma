// Prisma schema for MongoDB Atlas
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId     String   @unique
  username    String   @unique
  avatar      String?
  cover       String?
  name        String?
  surname     String?
  description String?
  city        String?
  school      String?
  work        String?
  website     String?
  createdAt   DateTime @default(now())
  lastSeen    DateTime @default(now())
  isOnline    Boolean  @default(false)

  posts                  Post[]
  likes                  Like[]
  comments               Comment[]
  followers              Follow[]          @relation("UserFollowers")
  followings             Follow[]          @relation("UserFollowing")
  followRequestsSent     FollowRequest[]   @relation("FollowRequestSender")
  followRequestsReceived FollowRequest[]   @relation("FollowRequestReceiver")
  blocks                 Block[]           @relation("BlockSender")
  blockedBy              Block[]           @relation("BlockReceiver")
  stories                Story[]
  chatParticipants       ChatParticipant[]
  sentMessages           Message[]         @relation("MessageSender")
  receivedMessages       Message[]         @relation("MessageReceiver")
  notifications          Notification[]    @relation("NotificationUser")
  sentNotifications      Notification[]    @relation("NotificationSender")
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  img       String?
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model FollowRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId

  sender   User @relation("FollowRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FollowRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Block {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  blockerId String   @db.ObjectId
  blockedId String   @db.ObjectId

  blocker User @relation("BlockSender", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("BlockReceiver", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  img       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants  ChatParticipant[]
  messages      Message[]
  notifications Notification[]
}

model ChatParticipant {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  chatId   String   @db.ObjectId
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Message {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  type       String    @default("text")
  imageUrl   String?
  createdAt  DateTime  @default(now())
  readAt     DateTime?
  senderId   String    @db.ObjectId
  receiverId String    @db.ObjectId
  chatId     String    @db.ObjectId

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  chat     Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  userId     String   @db.ObjectId
  fromUserId String?  @db.ObjectId
  chatId     String?  @db.ObjectId

  user     User  @relation("NotificationUser", fields: [userId], references: [id], onDelete: Cascade)
  fromUser User? @relation("NotificationSender", fields: [fromUserId], references: [id], onDelete: SetNull)
  chat     Chat? @relation(fields: [chatId], references: [id], onDelete: SetNull)
}
